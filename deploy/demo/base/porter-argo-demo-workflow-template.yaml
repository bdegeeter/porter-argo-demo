apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: porter-install-demo
spec:
  serviceAccount: porter-workflow
  arguments:
    parameters:
      - name: timeout
        value: 444
        type: integer
      - name: action
        value: create
        type: string
        enum:
          - create
          - delete
      - name: deployName
        type: string
      - name: porterVersion
        value: v1.0.14
      - name: porterNamespace
        value: demo
        type: string
      #- name: porterRef
      - name: porterBundleRepo
        #value: ghcr.io/bdegeeter/porter-test-me
        value: ghcr.io/sgettys/porter-test-me
        type: string
      - name: porterBundleVersion
        #value: v0.6.0-main
        value: v0.6.4
        type: string
      - name: porterParams
        value: '{ }'
        #value: '{ "delay": "3", "exitStatus": "0" }'
        type: map
      - name: porterCreds
        value: '[ ]'
      - name: debug
        value: false
        type: boolean
  entrypoint: porter-installation-include-output
  #TODO: how to handle failures in the exit handler
  #onExit: exit-handler

  templates:
    - name: porter-installation-include-output
      steps:
        - - name: generate-initial-global-outputs
            template: global-outputs
        - - name: create-porter-installation
            template: porter-create-installation
            when: '{{workflow.parameters.action}} == create'
            arguments:
              parameters:
                - name: deploy-name
                  value: '{{workflow.parameters.deployName}}'
                - name: bundle-repo
                  value: '{{workflow.parameters.porterBundleRepo}}'
                - name: bundle-version
                  value: '{{workflow.parameters.porterBundleVersion}}'
                - name: porter-namespace
                  value: '{{workflow.parameters.porterNamespace}}'
                - name: porter-params
                  value: '{{workflow.parameters.porterParams}}'
                - name: porter-creds
                  value: '{{workflow.parameters.porterCreds}}'
        - - name: porter-installation-outputs
            template: get-porter-installation-outputs
            when: '{{workflow.parameters.action}} == create'
            arguments:
              parameters:
                - name: install-name
                  value: '{{steps.create-porter-installation.outputs.parameters.install-name}}'
                - name: porter-version
                  value: '{{workflow.parameters.porterVersion}}'
                - name: porter-namespace
                  value: '{{workflow.parameters.porterNamespace}}'
                - name: deploy-name
                  value: '{{workflow.parameters.deployName}}'
        - - name: porter-outputs-from-job-logs
            template: get-outputs-from-job-logs
            when: '{{workflow.parameters.action}} == create'
            arguments:
              parameters:
                - name: outputs-job-name
                  value: '{{steps.porter-installation-outputs.outputs.parameters.outputs-job-name}}'
        # DELETE Installation
        - - name: get-installation-name
            template: get-installation-name-from-deploy-name
            when: '{{workflow.parameters.action}} == delete'
            arguments:
              parameters:
                - name: deploy-name
                  value: '{{workflow.parameters.deployName}}'

        - - name: porter-uninstall
            template: porter-uninstall-installation
            when: '{{workflow.parameters.action}} == delete'
            arguments:
              parameters:
                - name: install-name
                  value: '{{steps.get-installation-name.outputs.result}}'

    - name: installation-cleanup
      inputs:
        parameters:
          - name: installation-name
      container:
        image: argoproj/argoexec:v3.2.4
        command: [sh, -c]
        args: [
            "
            kubectl delete installations {{inputs.parameters.installation-name}}; \
            kubectl delete job -l=porter=true -l=installation={{inputs.parameters.installation-name}} ; \
            kubectl delete pod -l=porter=true -l=installation={{inputs.parameters.installation-name}} ; \
            kubectl delete pvc -l=porter=true -l=installation={{inputs.parameters.installation-name}} ;
            ",
          ]

    #Step Templates
    - name: global-outputs
      container:
        image: alpine:3.15
        command: [sh, -c]
        args: ["echo '[ ]'|base64"]
      outputs:
        parameters:
          - name: porterOutputs
            # "[ ]" empty list in base64 for no outputs
            value: WyBdCg==
            globalName: porterOutputs

    #TODO: add doc strings for all templates
    - name: whalesay
      inputs:
        parameters:
          - name: message
      container:
        image: docker/whalesay
        command: [cowsay]
        args: ['{{inputs.parameters.message}}']
    #TODO: add doc strings for all templates
    - name: porter-create-installation
      inputs:
        parameters:
          - name: deploy-name
          - name: bundle-repo
          - name: bundle-version
          - name: porter-namespace
          - name: porter-params
          - name: porter-creds
          - name: debug
            value: false
      resource:
        action: create
        successCondition: status.phase == Succeeded
        failureCondition: status.phase == Failed
        #TODO: add workflow UUID to porter Installation name and labels
        manifest: |
          {
            "apiVersion": "getporter.org/v1",
            "kind": "Installation",
            "metadata": {
               "generateName": "{{inputs.parameters.deploy-name}}-",
               "labels": {
                  "porterArgoDemo.deployName": "{{inputs.parameters.deploy-name}}"
               }
            },
            "spec": {
               "schemaVersion": "1.0.2",
               "name": "{{inputs.parameters.deploy-name}}",
               "namespace": "{{inputs.parameters.porter-namespace}}",
               "bundle": {
                "repository": "{{inputs.parameters.bundle-repo}}",
                "version": "{{inputs.parameters.bundle-version}}"
               },
               "parameters": {{inputs.parameters.porter-params}},
               "credentialSets": {{inputs.parameters.porter-creds}}
            }
          }
      outputs:
        parameters:
          - name: install-name
            valueFrom:
              jsonPath: '{.metadata.name}'
          #TODO: remote this now that it's in the first globals step
          - name: porterOutputs
            # "[ ]" empty list in base64 for no outputs
            value: WyBdCg==
            globalName: porterOutputs

    - name: get-installation-name-from-deploy-name
      inputs:
        parameters:
          - name: deploy-name
      script:
        image: bitnami/kubectl:latest
        command: [bash]
        source: |
          kubectl get installations -l "porterArgoDemo.deployName={{inputs.parameters.deploy-name}}" -o jsonpath='{.items[0].metadata.name}'

    - name: porter-uninstall-installation
      inputs:
        parameters:
          - name: install-name
      resource:
        successCondition: status.phase == Succeeded
        failureCondition: status.phase == Failed
        action: patch
        mergeStrategy: json
        flags:
          - installation
          - '{{inputs.parameters.install-name}}'
        manifest: |
          - op: replace
            path: /spec/uninstalled
            value: true

    #TODO: make porter version and config namespace a workflow var
    - name: get-porter-installation-outputs
      inputs:
        parameters:
          - name: install-name
          - name: porter-version
          - name: porter-namespace
          - name: deploy-name
      resource:
        action: create
        successCondition: status.phase == Succeeded
        failureCondition: status.phase == Failed
        manifest: |
          {
            "apiVersion": "getporter.org/v1",
            "kind": "AgentAction",
            "metadata": {
               "generateName": "{{inputs.parameters.deploy-name}}-",
               "labels": {
                  "porterArgoDemo.deployName": "{{inputs.parameters.deploy-name}}"
               }
            },
            "spec": {
              "args": ["installations", "outputs", "list", "-n", "{{inputs.parameters.porter-namespace}}", "-i", "{{inputs.parameters.deploy-name}}", "-o", "json"]
            }
          }
      outputs:
        parameters:
          - name: outputs-job-name
            valueFrom:
              jsonPath: '{.status.job.name}'
    - name: get-outputs-from-job-logs
      inputs:
        parameters:
          - name: outputs-job-name
          - name: namespace
            value: demo
      script:
        image: bitnami/kubectl:latest
        command: [bash]
        #TODO: add namespace as parameter
        source: |
          kubectl -n {{inputs.parameters.namespace}} logs job.batch/{{inputs.parameters.outputs-job-name}} | csplit -sf /tmp/outputs - /"porter installations"/+1
          cat /tmp/outputs01 | jq 'del(.[] | select(.Name == "io.cnab.outputs.invocationImageLogs")) | del(.[] | select(.Name == "tfstate"))' | jq '[.[] | with_entries(.key |= ascii_downcase)]' | base64 > /tmp/outputs.json
          cat /tmp/outputs.json | base64 -d
      outputs:
        parameters:
          - name: porterOutputs
            valueFrom:
              default: WyBdCg==
              path: /tmp/outputs.json
            globalName: porterOutputs
